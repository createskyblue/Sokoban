#include <Arduboy2.h>
Arduboy2 arduboy;
#include <EEPROM.h>
/*=========================================================
                         位图
  =========================================================*/
//启动画面
const uint8_t BOOT[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x82, 0x80, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xb2, 0x14, 0x4a, 0xaa, 0xaa, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x20, 0xa2, 0x20, 0x84, 0x44, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xca, 0x9a, 0x8a, 0x0a, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x28, 0xa8, 0x10, 0xaa, 0xaa, 0xaa, 0xaa, 0xab, 0xea, 0xa0, 0xaa, 0xaa, 0xaa, 0xab, 0x22, 0x22, 0x24, 0x20, 0x4a, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x42, 0x00, 0x00, 0x00, 0x02, 0x24, 0xaa, 0xaa, 0xa0, 0x00, 0xa8, 0x80, 0xa8, 0x08, 0x00, 0x00, 0xac, 0xa8, 0xa8, 0xa8, 0xa9, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xaa, 0xa8, 0x02, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x32, 0x22, 0x22, 0x22, 0x26, 0x0a, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x24, 0xaa, 0xa0, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0xca, 0x8a, 0x8a, 0x8a, 0x88, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xa2, 0xaa, 0x82, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x23, 0x22, 0x22, 0x22, 0x22, 0x22, 0x46, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xaa, 0x08, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xaa, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x26, 0xe2, 0x22, 0x22, 0x3b, 0x66, 0xba, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x29, 0x90, 0x00, 0x1a, 0x4d, 0x94, 0xa8, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x8f, 0xef, 0xaa, 0x8a, 0x8b, 0xae, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xa8, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x26, 0x32, 0x22, 0x22, 0x22, 0x22, 0x3a, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xa0, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xac, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xa2, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x26, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xa4, 0x88, 0x88, 0x88, 0x38, 0x88, 0x88, 0x80, 0x88, 0x8e, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x9a, 0x00, 0x00, 0x00, 0x00, 0xee, 0x00, 0x00, 0x30, 0xe0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x82, 0x22, 0x22, 0x23, 0x81, 0xa2, 0x22, 0x00, 0x00, 0x26, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x60, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x80, 0xa8, 0xa8, 0x38, 0x00, 0x70, 0x00, 0x88, 0x88, 0x0c, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xba, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x90, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x82, 0x22, 0x21, 0x80, 0x06, 0x10, 0x00, 0x00, 0x00, 0x0e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x00, 0x00, 0x01, 0x60, 0x38, 0xd0, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x16, 0x80, 0x88, 0x89, 0x30, 0xc3, 0x50, 0x88, 0x88, 0x88, 0x8e, 0x88, 0x88, 0x8a, 0xaa, 0xaa, 0xbe, 0x00, 0x00, 0x01, 0x0b, 0x84, 0x50, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x18, 0x82, 0x22, 0x23, 0x04, 0x39, 0x50, 0x00, 0x00, 0x00, 0x04, 0x20, 0x20, 0x27, 0xff, 0xff, 0xfa, 0x40, 0x00, 0x01, 0x04, 0xc1, 0x50, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x14, 0x88, 0xa8, 0xa9, 0x05, 0x81, 0x58, 0x08, 0x08, 0x08, 0x18, 0x88, 0x88, 0x9a, 0xaa, 0xaa, 0xba, 0x00, 0x00, 0x01, 0x05, 0x21, 0x50, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x10, 0x82, 0x22, 0x23, 0x35, 0x20, 0x50, 0x00, 0x00, 0x00, 0x6a, 0xaa, 0xaa, 0xea, 0x2a, 0x2a, 0x3a, 0x00, 0x00, 0x01, 0x25, 0x20, 0x50, 0x00, 0x00, 0x00, 0xc4, 0x46, 0x69, 0xe0, 0x00, 0x00, 0x14, 0x88, 0x88, 0x89, 0x65, 0x00, 0x58, 0x80, 0x80, 0x81, 0xa9, 0x28, 0xe5, 0xaa, 0xaa, 0xaa, 0xba, 0x00, 0x00, 0x01, 0x45, 0x07, 0x50, 0x00, 0x00, 0x03, 0x12, 0x86, 0xcf, 0x60, 0x00, 0x00, 0x10, 0x82, 0x22, 0x21, 0x45, 0x3c, 0x50, 0x00, 0x00, 0x06, 0xa8, 0x6b, 0x56, 0xaa, 0xaa, 0xaa, 0xba, 0x60, 0x00, 0x01, 0x45, 0x20, 0x50, 0x00, 0x00, 0x0c, 0x55, 0x06, 0x3c, 0x60, 0x00, 0x00, 0x14, 0x80, 0xa8, 0x01, 0x45, 0x00, 0xd8, 0x08, 0xff, 0xff, 0xff, 0xbd, 0x72, 0xaa, 0xaa, 0xaa, 0xbb, 0x00, 0x00, 0x01, 0x45, 0x07, 0x10, 0x00, 0x20, 0x00, 0x00, 0x42, 0xa9, 0x20, 0x00, 0x00, 0x12, 0xa2, 0x22, 0x01, 0x45, 0x38, 0x10, 0x00, 0x1a, 0xaa, 0xaa, 0xbf, 0xe6, 0xaa, 0x2a, 0x2a, 0x3e, 0x00, 0x00, 0x00, 0xc5, 0xc0, 0x30, 0x00, 0x0c, 0x44, 0x44, 0x55, 0x89, 0x60, 0x00, 0x00, 0x1c, 0x80, 0x88, 0x08, 0xe4, 0x00, 0xc8, 0x88, 0x8e, 0xaa, 0xaa, 0xab, 0x6a, 0xaf, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x5c, 0x0f, 0x80, 0x00, 0x03, 0xff, 0xff, 0xff, 0x51, 0x60, 0x00, 0x00, 0x10, 0x82, 0x22, 0x00, 0x4c, 0x39, 0x00, 0x00, 0x02, 0xaa, 0xaa, 0xac, 0xaa, 0xaa, 0xaa, 0xaa, 0xba, 0x00, 0x00, 0x80, 0x4e, 0xe1, 0x00, 0x00, 0x02, 0x00, 0x00, 0x05, 0x55, 0x60, 0x00, 0x00, 0x14, 0x88, 0xa8, 0x08, 0x4b, 0x89, 0x88, 0x08, 0x0a, 0xaa, 0xaa, 0xae, 0xaa, 0xaa, 0xaa, 0xaa, 0xba, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x80, 0x00, 0x02, 0x00, 0x00, 0x05, 0x11, 0x20, 0x00, 0x00, 0x10, 0x82, 0x22, 0x00, 0x08, 0x03, 0x80, 0x00, 0x02, 0x2a, 0x2a, 0x2e, 0xaa, 0xaa, 0x2a, 0x2a, 0x3a, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x05, 0x55, 0x60, 0x00, 0x00, 0x14, 0x88, 0x88, 0x08, 0x1c, 0x80, 0x80, 0x80, 0x8a, 0xaa, 0xaa, 0xae, 0xaa, 0xaa, 0xaa, 0xaa, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x05, 0x51, 0x60, 0x00, 0x00, 0x10, 0x82, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0xaa, 0xae, 0xaa, 0xaa, 0xaa, 0xaa, 0xba, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x05, 0x55, 0x60, 0x00, 0x00, 0x14, 0x88, 0xa8, 0x80, 0x88, 0x88, 0x88, 0x08, 0x8a, 0xaa, 0xaa, 0xae, 0xaa, 0xaa, 0xaa, 0xaa, 0xba
};
//墙的贴图
const uint8_t WALL[] PROGMEM = {
  0xff, 0xff, 0x00, 0x80, 0x01, 0x80, 0x80, 0x01, 0x40, 0x80, 0x01, 0x20, 0x80, 0x01, 0x10, 0x80, 0x01, 0x08, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0xff, 0xff, 0x04, 0x40, 0x00, 0x84, 0x20, 0x00, 0x44, 0x10, 0x00, 0x24, 0x08, 0x00, 0x14, 0x04, 0x00, 0x0c, 0x03, 0xff, 0xfc
};
//箱子的贴图
const uint8_t BOX[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x20, 0x83, 0x00, 0x20, 0x82, 0x80, 0x20, 0x82, 0x40, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x3f, 0xfe, 0x20, 0x10, 0x01, 0x20, 0x08, 0x00, 0xa0, 0x04, 0x00, 0x60, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//打开的箱子贴图
const uint8_t OBOX[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x1f, 0xfd, 0x00, 0x1f, 0xfd, 0x80, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x00, 0x01, 0xc0, 0x0f, 0xfe, 0xc0, 0x07, 0xff, 0x40, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//小人朝上的贴图
const uint8_t ManUp[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x01, 0x80, 0x40, 0x01, 0x40, 0x20, 0x01, 0x20, 0x10, 0x01, 0x1f, 0xf8, 0x01, 0x10, 0x08, 0x01, 0x50, 0x08, 0x01, 0x50, 0x08, 0x01, 0x50, 0x08, 0x01, 0x50, 0x08, 0x01, 0x50, 0x08, 0x00, 0xd0, 0x08, 0x00, 0xb0, 0x08, 0x00, 0x1f, 0xf8, 0x00, 0x08, 0x40, 0x00, 0x18, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//小人朝下的贴图
const uint8_t ManDown[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x01, 0x80, 0x40, 0x01, 0x40, 0x20, 0x01, 0x20, 0x10, 0x01, 0x1f, 0xf8, 0x01, 0x90, 0x08, 0x01, 0x90, 0x08, 0x01, 0x92, 0x48, 0x01, 0x90, 0x08, 0x01, 0x50, 0x08, 0x00, 0xd2, 0x48, 0x00, 0x51, 0x88, 0x00, 0x70, 0x08, 0x00, 0x1f, 0xf8, 0x00, 0x04, 0x40, 0x00, 0x0c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//小人朝左的贴图
const uint8_t ManLeft[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x01, 0x80, 0x40, 0x01, 0x40, 0x20, 0x01, 0x20, 0x10, 0x01, 0x1f, 0xf8, 0x01, 0x90, 0x08, 0x01, 0x30, 0x08, 0x01, 0x11, 0x08, 0x01, 0xb1, 0x08, 0x01, 0x51, 0x08, 0x00, 0x91, 0x08, 0x00, 0x52, 0x08, 0x00, 0x30, 0x08, 0x00, 0x1f, 0xf8, 0x00, 0x06, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//小人朝右的贴图
const uint8_t ManRight[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x01, 0x80, 0x20, 0x01, 0x40, 0x10, 0x01, 0x20, 0x08, 0x01, 0x1f, 0xf8, 0x01, 0x10, 0x08, 0x01, 0x10, 0x08, 0x01, 0x10, 0x88, 0x01, 0x10, 0x88, 0x01, 0x10, 0x88, 0x00, 0x90, 0x88, 0x00, 0x50, 0x48, 0x00, 0x30, 0x08, 0x00, 0x1f, 0xf8, 0x00, 0x08, 0x80, 0x00, 0x0c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
/*=========================================================
                         地图
  =========================================================*/
const PROGMEM byte MAP[42][16][16] = {
  //LEVEL 1
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 3 , 0, 3 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 0, 3 , 2 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 3 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 2
  1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 1 , 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 2 , 1 , 0, 1 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 3 , 1 , 1 , 1 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 3
  0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 3 , 1 , 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 2 , 3 , 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 4 , 4 , 1 , 0, 3 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 4 , 4 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 4
  0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 3 , 2 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 5 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 5
  0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 2 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 1 , 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 3 , 0, 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 0, 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 6
  0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 4 , 1 , 1 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 3 , 0, 3 , 1 , 4 , 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 0, 5 , 0, 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 4 , 1 , 3 , 0, 3 , 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 1 , 1 , 0, 0, 0, 0, 1 , 0, 1 , 1 , 1 , 4 , 0, 0, 0, 0, 2 , 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 7
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 1 , 0, 2 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 3 , 0, 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 3 , 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 4 , 4 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 8
  0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 4 , 0, 3 , 1 , 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 3 , 0, 3 , 0, 0, 2 , 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 0, 3 , 0, 3 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 9
  0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 3 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 3 , 0, 1 , 1 , 1 , 0, 3 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 4 , 4 , 4 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 1 , 4 , 4 , 4 , 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 3 , 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 2 , 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 10
  0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 3 , 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 2 , 0, 3 , 4 , 4 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 4 , 4 , 4 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 11
  0, 1 , 1 , 1 , 1 , 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 3 , 0, 1 , 1 , 1 , 1 , 3 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 3 , 4 , 4 , 4 , 4 , 0, 3 , 0, 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 1 , 0, 2 , 0, 1 , 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 12
  0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 2 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 4 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 4 , 3 , 4 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 5 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 13
  0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 4 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 3 , 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 2 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 14
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 4 , 4 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 2 , 3 , 4 , 5 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 4 , 4 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 15
  0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 3 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 2 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 16
  0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 3 , 0, 1 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 0, 3 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 3 , 1 , 3 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 1 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 2 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 17
  1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 3 , 3 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 4 , 4 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 4 , 4 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 2 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 18
  0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 4 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 3 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 1 , 5 , 4 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 1 , 1 , 3 , 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 3 , 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 19
  0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 5 , 2 , 4 , 4 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 4 , 4 , 4 , 3 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 1 , 3 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 0, 1 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 20
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 3 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 1 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 2 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 21
  0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 4 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 1 , 1 , 3 , 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 3 , 0, 0, 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 1 , 2 , 0, 3 , 0, 3 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 22
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 3 , 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 4 , 4 , 4 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 4 , 4 , 4 , 3 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 1 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 3 , 0, 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 2 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 23
  0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 3 , 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 2 , 3 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 3 , 3 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 24
  1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 1 , 0, 1 , 0, 0, 4 , 1 , 0, 0, 1 , 0, 0, 3 , 0, 3 , 0, 1 , 0, 1 , 4 , 4 , 4 , 1 , 0, 0, 1 , 0, 1 , 0, 0, 3 , 0, 1 , 1 , 1 , 0, 0, 4 , 1 , 0, 0, 1 , 0, 0, 3 , 3 , 3 , 0, 0, 0, 3 , 0, 2 , 4 , 1 , 0, 0, 1 , 1 , 1 , 0, 0, 3 , 0, 0, 3 , 1 , 0, 0, 4 , 1 , 0, 0, 0, 0, 1 , 0, 0, 3 , 1 , 3 , 0, 1 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 4 , 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 25
  0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 3 , 1 , 1 , 1 , 0, 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 1 , 1 , 0, 5 , 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 1 , 0, 3 , 4 , 4 , 4 , 4 , 4 , 4 , 0, 1 , 0, 0, 0, 0, 1 , 1 , 0, 1 , 1 , 1 , 0, 4 , 0, 1 , 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 3 , 1 , 1 , 1 , 3 , 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 3 , 2 , 1 , 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 3 , 1 , 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 26
  1 , 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 1 , 0, 1 , 0, 1 , 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 0, 1 , 0, 1 , 0, 0, 1 , 1 , 1 , 1 , 0, 1 , 0, 1 , 0, 0, 1 , 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 1 , 1 , 1 , 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 1 , 0, 0, 1 , 1 , 0, 1 , 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 3 , 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 1 , 1 , 3 , 1 , 0, 0, 1 , 1 , 0, 1 , 1 , 1 , 1 , 0, 3 , 0, 0, 0, 0, 3 , 3 , 0, 1 , 1 , 0, 1 , 0, 1 , 1 , 0, 1 , 3 , 1 , 0, 0, 1 , 0, 0, 1 , 1 , 0, 1 , 0, 1 , 1 , 2 , 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 1 , 1 ,
  //LEVEL 27
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 3 , 1 , 0, 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 3 , 0, 0, 0, 1 , 0, 1 , 4 , 4 , 1 , 0, 0, 1 , 1 , 0, 3 , 0, 3 , 1 , 0, 1 , 0, 1 , 4 , 4 , 0, 0, 0, 1 , 1 , 0, 3 , 0, 3 , 0, 0, 1 , 0, 1 , 4 , 4 , 1 , 0, 0, 1 , 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 1 , 4 , 4 , 1 , 0, 1 , 0, 3 , 0, 3 , 0, 1 , 0, 0, 0, 0, 1 , 4 , 4 , 0, 0, 0, 0, 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 1 , 1 , 1 , 2 , 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0,
  //LEVEL 28
  0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 3 , 0, 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 3 , 0, 0, 1 , 0, 1 , 5 , 4 , 5 , 4 , 5 , 1 , 1 , 1 , 0, 3 , 0, 3 , 0, 1 , 1 , 1 , 4 , 5 , 4 , 5 , 4 , 1 , 0, 1 , 3 , 0, 3 , 0, 0, 1 , 0, 0, 5 , 4 , 5 , 4 , 5 , 1 , 0, 1 , 2 , 3 , 0, 3 , 0, 0, 0, 0, 4 , 5 , 4 , 5 , 1 , 1 , 0, 1 , 3 , 0, 3 , 0, 0, 1 , 0, 0, 5 , 4 , 5 , 4 , 5 , 1 , 1 , 1 , 0, 3 , 0, 3 , 0, 1 , 1 , 1 , 4 , 5 , 4 , 5 , 4 , 1 , 1 , 0, 0, 0, 3 , 0, 0, 1 , 0, 1 , 5 , 4 , 5 , 4 , 5 , 1 , 1 , 0, 0, 3 , 0, 3 , 0, 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 29
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 1 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 3 , 0, 3 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 2 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 30
  0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 4 , 3 , 2 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 3 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 5 , 0, 4 , 0, 4 , 0, 1 , 1 , 0, 0, 0, 0, 1 , 1 , 0, 3 , 1 , 1 , 3 , 1 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 4 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 31
  0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 4 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 3 , 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 1 , 1 , 4 , 1 , 1 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 3 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 32
  0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 0, 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 0, 3 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 3 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 3 , 1 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 2 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 33
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 3 , 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 3 , 0, 0, 0, 3 , 3 , 0, 1 , 0, 0, 0, 0, 1 , 0, 3 , 3 , 0, 1 , 3 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 3 , 0, 0, 0, 3 , 0, 1 , 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 1 , 3 , 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 4 , 4 , 2 , 0, 1 , 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 1 , 4 , 4 , 0, 0, 3 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 4 , 3 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 4 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 34
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 3 , 0, 1 , 3 , 0, 1 , 0, 3 , 1 , 1 , 3 , 0, 1 , 0, 1 , 0, 1 , 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 0, 0, 1 , 1 , 3 , 1 , 3 , 1 , 1 , 3 , 3 , 0, 1 , 0, 1 , 0, 1 , 0, 1 , 0, 4 , 4 , 4 , 0, 1 , 0, 0, 0, 1 , 0, 1 , 0, 3 , 0, 0, 4 , 0, 1 , 0, 4 , 3 , 0, 0, 0, 1 , 0, 1 , 0, 3 , 1 , 2 , 3 , 4 , 4 , 4 , 1 , 0, 1 , 0, 0, 1 , 0, 1 , 0, 0, 0, 0, 4 , 0, 1 , 0, 4 , 0, 0, 3 , 0, 1 , 0, 1 , 0, 1 , 1 , 4 , 3 , 1 , 1 , 1 , 3 , 4 , 0, 1 , 0, 1 , 0, 1 , 0, 1 , 0, 3 , 4 , 4 , 4 , 4 , 4 , 0, 1 , 1 , 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 35
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 3 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 5 , 4 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 1 , 4 , 2 , 4 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 3 , 1 , 1 , 1 , 5 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 36
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 3 , 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 3 , 3 , 3 , 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 1 , 0, 1 , 1 , 0, 4 , 4 , 4 , 0, 0, 0, 0, 1 , 1 , 0, 0, 1 , 0, 1 , 2 , 1 , 4 , 4 , 4 , 1 , 1 , 1 , 3 , 0, 1 , 0, 0, 1 , 0, 1 , 0, 3 , 4 , 4 , 4 , 0, 0, 0, 0, 0, 1 , 0, 1 , 1 , 0, 1 , 0, 3 , 4 , 4 , 4 , 3 , 0, 1 , 0, 1 , 1 , 0, 1 , 0, 0, 0, 1 , 1 , 1 , 1 , 0, 1 , 1 , 1 , 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 3 , 0, 0, 0, 3 , 0, 1 , 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 37
  0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 2 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 3 , 3 , 3 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 4 , 0, 3 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 4 , 3 , 4 , 0, 4 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 4 , 1 , 4 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 38
  0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 1 , 4 , 4 , 4 , 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 4 , 4 , 0, 0, 1 , 0, 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 4 , 4 , 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 4 , 4 , 0, 0, 1 , 0, 3 , 1 , 1 , 0, 1 , 0, 0, 0, 0, 1 , 4 , 4 , 4 , 0, 1 , 3 , 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 3 , 0, 3 , 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 2 , 0, 3 , 3 , 3 , 0, 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 1 , 1 , 0, 3 , 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 39
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 3 , 0, 3 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 1 , 3 , 1 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 4 , 4 , 0, 4 , 4 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 4 , 4 , 0, 4 , 4 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 1 , 3 , 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 3 , 0, 3 , 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 2 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 40
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 4, 1, 0, 4, 0, 1, 1, 0, 0, 1, 4, 4, 1,
  1, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 1, 0, 0, 1,
  1, 1, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 3, 0, 0, 1,
  1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1,
  1, 0, 3, 0, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 1, 1,
  1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1,
  1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
  1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1,
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1,
  1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,
  1, 0, 1, 0, 3, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1,
  1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,
  1, 2, 3, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 1,
  1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 0, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  //LEVEL 41
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 4 , 0, 3 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 4 , 5 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 5 , 4 , 1 , 3 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 0, 2 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 42
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 1 , 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 3 , 0, 0, 0, 0, 3 , 0, 2 , 0, 1 , 0, 0, 0, 1 , 1 , 0, 1 , 3 , 1 , 1 , 4 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 4 , 4 , 4 , 5 , 4 , 0, 3 , 0, 1 , 0, 0, 0, 0, 1 , 0, 3 , 1 , 0, 1 , 4 , 1 , 0, 1 , 0, 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 3 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //0->空白
  //1->墙
  //2->人
  //3->箱子
  //4->位置
  //5->放到正确位置的箱子
  //6->在标签上的人
  //每个地图大小16*16 可以自行添加
};
/*=========================================================
                         变量
  =========================================================*/
bool DisplayInvert = true;
int Pstep; //玩家步数
byte CP = 1; //关卡
byte ACP = 42;  //关卡总数
int RMAP[16][16]; //运行地图
byte DX, DY, CDX, CDY;
byte PMX, PMY; //玩家在地图中的位置 0:x 1:y
int CPDX, CPDY; //玩家朝向x和y轴
byte PlayerD = 1; //最后方向 默认1 也就是下
boolean LA = false; //行动是否合法
boolean WIN = false; //检测是否通关
byte SBDPL[] = {1, 2};  //障碍物id
/*====================================================================
                             软重启函数
  ====================================================================*/
void(* resetFunc) (void) = 0; //制造重启命令
/*=========================================================
                     只循环一次
  =========================================================*/
void setup() {
  arduboy.boot();
  arduboy.invert(DisplayInvert);
  arduboy.drawSlowXYBitmap(0, 0, BOOT, 128, 64, 1);
  arduboy.setCursor(2, 2);
  arduboy.print(F("Sokoban\nBY LHW"));
  arduboy.display();
  byte ERC = 0; //EEProm Check
  //检查EEPROM
  for (int i = 0; i < 7; i++) {
    ERC = EEPROM.read(i) + ERC;
    //EEPROM 0   1   2   3   4   5   6
    //      115 111 107 111 98  97  110
    //       s   o   k   o   b   a   n
  }
  if (ERC != 237) {
    arduboy.clear();
    arduboy.println(F("initialize the EEPROM"));
    arduboy.print(ERC);
    arduboy.print("!=");
    arduboy.println(byte(115 + 111 + 107 + 111 + 98 + 97 + 110));
    arduboy.display();
    //初始化EEPROM
    for (int i = 0 ; i < EEPROM.length() ; i++) {
      EEPROM.write(i, 0);
    }
    EEPROM.write(0, 115);
    EEPROM.write(1, 111);
    EEPROM.write(2, 107);
    EEPROM.write(3, 111);
    EEPROM.write(4, 98);
    EEPROM.write(5, 97);
    EEPROM.write(6, 110);
    ERC = 0;
    for (int i = 0; i < 7; i++) {
      ERC = EEPROM.read(i) + ERC;
    }
    if (ERC != 0) resetFunc(); else arduboy.println(F("EEPROM writing error"));
    arduboy.display();
  }
  delay(1500);
  //加载地图
  load_cp();   //把地图载入内存
  draw(); //渲染画面
}
void loop() {
  LA = false;                           //是否刷新移动  否
  if (arduboy.pressed(B_BUTTON)) {
    load_cp();                          //把当前关卡地图载入内存
    draw();                             //渲染画面
  }
  if (arduboy.pressed(A_BUTTON)) {      //打开菜单
    GMenu();
  }
  //键盘控制玩家部分
  if (arduboy.pressed(UP_BUTTON)) {
    PlayerD = 0;//设置玩家方向
    CPDX = 0;
    CPDY = -1;
    SBDP();
  } else if (arduboy.pressed(DOWN_BUTTON)) {
    PlayerD = 1;//设置玩家方向
    CPDX = 0;
    CPDY = 1;
    SBDP();
  } else if (arduboy.pressed(LEFT_BUTTON)) {
    PlayerD = 2;//设置玩家方向
    CPDX = -1;
    CPDY = 0;
    SBDP();
  } else if (arduboy.pressed(RIGHT_BUTTON)) {
    PlayerD = 3;//设置玩家方向
    CPDX = 1;
    CPDY = 0;
    SBDP();
  }
  if (LA == true) {
    //行动合法
    //如果脚下是空的
    if (RMAP[PMX + CPDX * 0][PMY + CPDY * 0] == 2) {
      if (RMAP[PMX + CPDX * 1][PMY + CPDY * 1] == 0) {
        //如果前方是空气
        RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 2;
        RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 0;
        Pstep++; //增加玩家步数
      } else if (RMAP[PMX + CPDX * 1][PMY + CPDY * 1] == 4) {  //如果前方是标记
        RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 6;
        RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 0;
        Pstep++; //增加玩家步数
      } else if (RMAP[PMX + CPDX * 1][PMY + CPDY * 1] == 5) {  //如果前面不是标记而是标记上有箱子
        //如果前方标签上的箱子前面是空气
        if (RMAP[PMX + CPDX * 2][PMY + CPDY * 2] == 0) {
          RMAP[PMX + CPDX * 2][PMY + CPDY * 2] = 3;
          RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 6;
          RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 0;
          Pstep++; //增加玩家步数
        } else if (RMAP[PMX + CPDX * 2][PMY + CPDY * 2] == 4) {  //如果前方标签上的箱子前面是标签
          RMAP[PMX + CPDX * 2][PMY + CPDY * 2] = 5;
          RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 6;
          RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 0;
          Pstep++; //增加玩家步数
        }
      } else if (RMAP[PMX + CPDX * 1][PMY + CPDY * 1] == 3) {  //前方是箱子
        //箱子前面是空气
        if (RMAP[PMX + CPDX * 2][PMY + CPDY * 2] == 0) {
          RMAP[PMX + CPDX * 2][PMY + CPDY * 2] = 3;
          RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 2;
          RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 0;
          Pstep++; //增加玩家步数
        } else if (RMAP[PMX + CPDX * 2][PMY + CPDY * 2] == 4) {
          //箱子前面是标记
          RMAP[PMX + CPDX * 2][PMY + CPDY * 2] = 5;
          RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 2;
          RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 0;
          Pstep++; //增加玩家步数
        }
      }
    } else if (RMAP[PMX + CPDX * 0][PMY + CPDY * 0] == 6) { //如果前面不是空气并且脚下有标记
      if (RMAP[PMX + CPDX * 1][PMY + CPDY * 1] == 0) {
        RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 2; //如果前方是空气
        RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 4;
        Pstep++; //增加玩家步数
      } else  if (RMAP[PMX + CPDX * 1][PMY + CPDY * 1] == 4) { //如果前方依然是是标记
        RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 6;
        RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 4;
        Pstep++; //增加玩家步数
      } else if (RMAP[PMX + CPDX * 1][PMY + CPDY * 1] == 5) {
        if (RMAP[PMX + CPDX * 2][PMY + CPDY * 2] == 0) { //如果前方标签上的箱子前面是空气
          RMAP[PMX + CPDX * 2][PMY + CPDY * 2] = 3;
          RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 6;
          RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 4;
          Pstep++; //增加玩家步数
        } else if (RMAP[PMX + CPDX * 2][PMY + CPDY * 2] == 4) {//如果前方标签上的箱子前面是标签
          RMAP[PMX + CPDX * 2][PMY + CPDY * 2] = 5;
          RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 6;
          RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 4;
          Pstep++; //增加玩家步数
        }
        Pstep++; //增加玩家步数
      } else if (RMAP[PMX + CPDX * 1][PMY + CPDY * 1] == 3) {//如果前方只有箱子，箱子前面但是脚下有标签
        if (RMAP[PMX + CPDX * 2][PMY + CPDY * 2] == 0) {  //箱子前面是空气
          RMAP[PMX + CPDX * 2][PMY + CPDY * 2] = 3;
          RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 2;
          RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 4;
          Pstep++; //增加玩家步数
        } else  if (RMAP[PMX + CPDX * 2][PMY + CPDY * 2] == 4) {//箱子前面是标签
          RMAP[PMX + CPDX * 2][PMY + CPDY * 2] = 5;
          RMAP[PMX + CPDX * 1][PMY + CPDY * 1] = 2;
          RMAP[PMX + CPDX * 0][PMY + CPDY * 0] = 4;
          Pstep++; //增加玩家步数
        }
      }
    }
    draw();//渲染画面
    delay(50); //防止游戏过快
  }
  if (WIN == true) win(); //检测到通关 调用通关函数
}
void SBDP() {
  LA = true;
  byte length = sizeof(SBDPL) / sizeof(SBDPL[0]);
  for (byte i = 0; i < length; i++) {
    if (RMAP[PMX + CPDX * 1][PMY + CPDY * 1] == SBDPL[i]) LA = false;
  }
}
void draw() {
  arduboy.clear();                                        //清除显存
  DrawMap();                                              //渲染游戏地图
  arduboy.display();                                      //把画面显示到OLED上
}
void load_cp() {
  Pstep = 0; //清空玩家步数
  for (byte MapReadY = 0; MapReadY < 16; MapReadY++) {
    for (byte MapReadX = 0; MapReadX < 16; MapReadX++) {
      RMAP[MapReadX][MapReadY] = pgm_read_byte(&MAP[CP - 1][MapReadY][MapReadX]);
    }
  }
}
void DrawMap() {
  WIN = true;//假设玩家通关
  for (byte MapReadY = 0; MapReadY < 16; MapReadY++) {
    for (byte MapReadX = 0; MapReadX < 16; MapReadX++) {
      switch (RMAP[MapReadX][MapReadY]) {
        case 2:
          PMX = MapReadX;   //当前是玩家所在的位置 重设玩家所在地图位置
          PMY = MapReadY;
          break;
        case 3:
          WIN = false;   //检测到没有放在指定位置的箱子 表明玩家没有通关
          break;
        case 6:
          PMX = MapReadX;   //当前是玩家所在的位置 重设玩家所在地图位置
          PMY = MapReadY;
          break;
      }
    }
  }
  int MapReadLimit[4]; //显示地图缓存读取范围 防止溢出死循环
  MapReadLimit[0] = PMX - 4;
  MapReadLimit[1] = PMX + 5;
  MapReadLimit[2] = PMY - 2;
  MapReadLimit[3] = PMY + 3;
  if (MapReadLimit[0] < 0) CDX = 15 * (-MapReadLimit[0]); else CDX = 0;
  if (MapReadLimit[2] < 0) CDY = 15 * (-MapReadLimit[2]); else CDY = 0;
  DX = CDX;
  DY = CDY;
  for (byte i = 0; i < 4; i++) {
    if (MapReadLimit[i] < 0) MapReadLimit[i] = 0; else if (MapReadLimit[i] > 15) MapReadLimit[i] = 15;
  }
  for (byte MapReadY = MapReadLimit[2]; MapReadY <= MapReadLimit[3]; MapReadY++) {
    for (byte MapReadX = MapReadLimit[0]; MapReadX <= MapReadLimit[1]; MapReadX++) {
      //0->空白
      //1->墙
      //2->人
      //3->箱子
      //4->位置
      //5->放到正确位置的箱子
      //6->在标签上的人
      switch (RMAP[MapReadX][MapReadY]) {
        case 1:
          //画墙
          arduboy.fillRect(DX - 6,  DY - 6, 16, 16, 0);                                 //清空重绘区
          arduboy.drawLine(DX, DY + 10, DX, DY + 14, BLACK);                            //处理渲染错误的线条
          arduboy.drawLine(DX + 10, DY, DX + 14, DY, BLACK);                            //处理渲染错误的线条
          arduboy.drawSlowXYBitmap(DX - 6, DY - 6,  WALL, 22, 22, 1);                   //显示墙的图片
          break;
        case 2:
          DrawPlayer();                                                                 //显示玩家
          break;
        case 3:
          DrawBox();                                                                    //显示箱子
          break;
        case 4:
          DrawTag();                                                                    //在对应的位置画一个"X"
          break;
        case 5:
          arduboy.drawSlowXYBitmap(DX - 6, DY - 6, OBOX, 22, 22, 1);                    //显示打开的箱子图片
          break;
        case 6:
          DrawTag();
          DrawPlayer();
          break;
      }
      DX += 15;
    }
    DX = CDX;
    DY += 15;
  }
}
void DrawPlayer() {
  //画玩家
  arduboy.fillRect(DX - 1,  DY - 2, 16, 17, 0);                                   //清空重绘区
  if (PlayerD == 0) {                                                           //如果玩家方向为上
    arduboy.drawSlowXYBitmap(DX - 6, DY - 6,  ManUp, 22, 22, 1);                  //玩家向上图片
  } else {
    if (PlayerD == 1) {//如果玩家方向为下
      arduboy.drawSlowXYBitmap(DX - 6, DY - 6, ManDown, 22, 22, 1);               //玩家向下图片
    } else {
      if (PlayerD == 2) {//如果玩家方向为左
        arduboy.drawSlowXYBitmap(DX - 6, DY - 6, ManLeft, 22, 22, 1);             //玩家向左图片
      } else {                                                                    //如果玩家方向不是上 也不是下 更不是左 （右）
        arduboy.drawSlowXYBitmap(DX - 6, DY - 6,  ManRight, 22, 22, 1);           //玩家向右图片
      }
    }
  }
}
void DrawBox() {
  //画箱子
  arduboy.drawSlowXYBitmap(DX - 6, DY - 6, OBOX, 22, 22, 0);  //消除过多像素
  arduboy.drawSlowXYBitmap(DX - 6, DY - 6,  BOX, 22, 22, 1);
}
void DrawTag() {
  //画标记
  arduboy.drawLine(DX + 5, DY + 5, DX + 16, DY + 16, WHITE);
  arduboy.drawLine(DX + 16, DY + 5, DX + 5, DY + 16, WHITE);
}

void win() {
  boolean NE = false;
  //读取EEPROM
  if (EEPROM.read(6 + CP) > Pstep || EEPROM.read(6 + CP) == 0) {
    //破纪录
    EEPROM.write(6 + CP, Pstep);
    NE = true;
  }
  arduboy.clear();                          //清空显存
  arduboy.drawRect(4, 4, 120, 56, 1);
  arduboy.drawLine(44, 4, 76, 4, 0);
  arduboy.setCursor(52, 2);               //设置光标
  arduboy.print(F("WIN"));                 //打印 你赢了
  arduboy.setCursor(32, 16);
  arduboy.print(F("Step "));
  arduboy.print(Pstep);
  arduboy.setCursor(32, 24);
  arduboy.print(F("History "));
  arduboy.print(EEPROM.read(6 + CP));
  if (NE) {
    arduboy.setCursor(32, 40);
    arduboy.print(F("NEW RECORD"));
  }
  arduboy.display();                        //把画面显示在OLED上
  while (!arduboy.pressed(A_BUTTON)) {}
  if (CP < ACP) {                           //如果当前关卡少于总关卡
    CP++;                                   //那么关卡数+1
  } else {                                  //否则如果是最后一关
    CP = 1;                                 //切换回去第一关
  }
  load_cp();                               //把地图载入内存
  arduboy.clear();
  DrawMap();
  arduboy.display();
  delay(50);
}
void GMenu() {
  while ((arduboy.pressed(A_BUTTON))) {
    arduboy.clear();                                        //清除显存
    DrawMap();                                              //渲染游戏地图
    arduboy.fillRect(88,  0, 40, 128, 1);                   //清空重绘区
    arduboy.setTextColor(0);
    arduboy.setTextBackground(1);
    arduboy.setCursor(96, 8);                               //设置光标
    arduboy.print(F("Level"));                                      //显示当前关卡
    arduboy.setCursor(96, 16);                               //设置光标
    arduboy.print(CP);
    arduboy.print(F("~"));                                     //显示分隔符
    arduboy.print(ACP);                                     //显示一共有多少关
    arduboy.setCursor(96, 40);
    arduboy.print(F("Step"));
    arduboy.setCursor(96, 48);
    arduboy.print(Pstep);
    arduboy.setTextColor(1);
    arduboy.setTextBackground(0);
    if (arduboy.pressed(UP_BUTTON)) {   //上键与A键同时按下
      if (CP < ACP) CP++;               //如果不是最后一关 让关卡数+1
      load_cp();                               //把地图载入内存
    }
    if (arduboy.pressed(DOWN_BUTTON)) { //下键与A键同时按下
      if (CP > 1) CP--;                 //如果不是第一关 让关卡数-1
      load_cp();                               //把地图载入内存
    }
    if (arduboy.pressed(LEFT_BUTTON)) {
      DisplayInvert = ! DisplayInvert;
      arduboy.invert(DisplayInvert);
      delay(50);
    }
    arduboy.display();
  }
  arduboy.clear();
  DrawMap();
  arduboy.display();
}
