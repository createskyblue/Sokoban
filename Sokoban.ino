#include <Arduboy2.h>
Arduboy2 arduboy;
#include <EEPROM.h>
/*=========================================================
                         位图
  =========================================================*/
//启动画面
const uint8_t BOOT[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x24, 0x0f, 0xb0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x82, 0x20, 0x0a, 0x78, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x36, 0x47, 0xff, 0x12, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x62, 0x64, 0x04, 0xfc, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x22, 0x7f, 0x04, 0x84, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x23, 0xa4, 0x0c, 0xfc, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x26, 0x24, 0x0e, 0x84, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x62, 0x3f, 0x0d, 0xfc, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x36, 0xc2, 0x24, 0x1c, 0x84, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x82, 0x3f, 0x14, 0xfc, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x20, 0x04, 0x84, 0x0e, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x81, 0x8c, 0xcf, 0x04, 0xa2, 0xf8, 0x22, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x82, 0x52, 0x49, 0x04, 0xa2, 0x20, 0x22, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x40, 0x92, 0x4f, 0x07, 0xa2, 0x23, 0x23, 0xd1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x41, 0x12, 0x49, 0x04, 0xaa, 0x23, 0x22, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x82, 0x12, 0x49, 0x04, 0x94, 0x20, 0x22, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x83, 0xcc, 0xef, 0x04, 0x94, 0x20, 0x3a, 0x4a, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x04, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x40, 0x00, 0x0f, 0xfc, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x08, 0x20, 0x00, 0x08, 0x04, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x84, 0x10, 0x00, 0x09, 0x25, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfb, 0xff, 0xf8, 0x05, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x04, 0x04, 0x44, 0x08, 0x10, 0x08, 0x05, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x02, 0x06, 0x42, 0x08, 0x08, 0x0a, 0x05, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x01, 0x04, 0x59, 0x48, 0x04, 0x09, 0xe4, 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x84, 0x58, 0x88, 0x02, 0x08, 0x05, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x45, 0x43, 0xe8, 0x01, 0x08, 0x06, 0x80, 0x04, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x43, 0xef, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x18, 0x00, 0x14, 0x40, 0x08, 0x00, 0x41, 0x08, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x14, 0x00, 0x0a, 0x47, 0xe8, 0x00, 0x23, 0x08, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x12, 0x00, 0x05, 0x5f, 0x0c, 0x00, 0x10, 0x18, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x11, 0x00, 0x02, 0xc0, 0x0a, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x80, 0x01, 0x7f, 0xf9, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x60, 0x00, 0x40, 0x00, 0x40, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x50, 0x00, 0x20, 0x00, 0x20, 0x00, 0x80, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x10, 0x48, 0x00, 0x10, 0x00, 0x10, 0x00, 0x3f, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x44, 0x00, 0x08, 0x00, 0x08, 0x00, 0x5f, 0xf8, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x42, 0x00, 0x04, 0x00, 0x04, 0x00, 0x6f, 0xfc, 0x20, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x41, 0x80, 0x01, 0x00, 0x03, 0x00, 0x77, 0xfe, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x41, 0x40, 0x00, 0x9e, 0x0c, 0x80, 0x77, 0xfe, 0x04, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x41, 0x20, 0x00, 0x41, 0xf8, 0x40, 0x77, 0xfe, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x41, 0x10, 0x00, 0x20, 0xc7, 0x20, 0x77, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x41, 0x08, 0x00, 0x13, 0x00, 0x10, 0x77, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x06, 0x00, 0x04, 0x00, 0x04, 0x77, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x05, 0x00, 0x02, 0x00, 0x02, 0x37, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x04, 0x80, 0x01, 0x00, 0x01, 0x17, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x04, 0x40, 0x00, 0x80, 0x00, 0x87, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x04, 0x20, 0x00, 0x40, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x04, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x04, 0x10, 0x00, 0x30, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x10, 0x00, 0x30, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x10, 0x00, 0x30, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x10, 0x00, 0x30, 0x00, 0x20, 0x00, 0x80
};
//墙的贴图
const uint8_t WALL[] PROGMEM = {
  0xff, 0xff, 0x00, 0x80, 0x01, 0x80, 0x80, 0x01, 0x40, 0x80, 0x01, 0x20, 0x80, 0x01, 0x10, 0x80, 0x01, 0x08, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0x80, 0x01, 0x04, 0xff, 0xff, 0x04, 0x40, 0x00, 0x84, 0x20, 0x00, 0x44, 0x10, 0x00, 0x24, 0x08, 0x00, 0x14, 0x04, 0x00, 0x0c, 0x03, 0xff, 0xfc
};
//箱子的贴图
const uint8_t BOX[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0x00, 0x20, 0x83, 0x00, 0x20, 0x82, 0x80, 0x20, 0x82, 0x40, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x20, 0x82, 0x20, 0x3f, 0xfe, 0x20, 0x10, 0x01, 0x20, 0x08, 0x00, 0xa0, 0x04, 0x00, 0x60, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//打开的箱子贴图
const uint8_t OBOX[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x1f, 0xfd, 0x00, 0x1f, 0xfd, 0x80, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x1f, 0xfd, 0xc0, 0x00, 0x01, 0xc0, 0x0f, 0xfe, 0xc0, 0x07, 0xff, 0x40, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//小人朝上的贴图
const uint8_t ManUp[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x01, 0x80, 0x40, 0x01, 0x40, 0x20, 0x01, 0x20, 0x10, 0x01, 0x1f, 0xf8, 0x01, 0x10, 0x08, 0x01, 0x50, 0x08, 0x01, 0x50, 0x08, 0x01, 0x50, 0x08, 0x01, 0x50, 0x08, 0x01, 0x50, 0x08, 0x00, 0xd0, 0x08, 0x00, 0xb0, 0x08, 0x00, 0x1f, 0xf8, 0x00, 0x08, 0x40, 0x00, 0x18, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//小人朝下的贴图
const uint8_t ManDown[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x01, 0x80, 0x40, 0x01, 0x40, 0x20, 0x01, 0x20, 0x10, 0x01, 0x1f, 0xf8, 0x01, 0x90, 0x08, 0x01, 0x90, 0x08, 0x01, 0x92, 0x48, 0x01, 0x90, 0x08, 0x01, 0x50, 0x08, 0x00, 0xd2, 0x48, 0x00, 0x51, 0x88, 0x00, 0x70, 0x08, 0x00, 0x1f, 0xf8, 0x00, 0x04, 0x40, 0x00, 0x0c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//小人朝左的贴图
const uint8_t ManLeft[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x01, 0x80, 0x40, 0x01, 0x40, 0x20, 0x01, 0x20, 0x10, 0x01, 0x1f, 0xf8, 0x01, 0x90, 0x08, 0x01, 0x30, 0x08, 0x01, 0x11, 0x08, 0x01, 0xb1, 0x08, 0x01, 0x51, 0x08, 0x00, 0x91, 0x08, 0x00, 0x52, 0x08, 0x00, 0x30, 0x08, 0x00, 0x1f, 0xf8, 0x00, 0x06, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//小人朝右的贴图
const uint8_t ManRight[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x01, 0x80, 0x20, 0x01, 0x40, 0x10, 0x01, 0x20, 0x08, 0x01, 0x1f, 0xf8, 0x01, 0x10, 0x08, 0x01, 0x10, 0x08, 0x01, 0x10, 0x88, 0x01, 0x10, 0x88, 0x01, 0x10, 0x88, 0x00, 0x90, 0x88, 0x00, 0x50, 0x48, 0x00, 0x30, 0x08, 0x00, 0x1f, 0xf8, 0x00, 0x08, 0x80, 0x00, 0x0c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
/*=========================================================
                         地图
  =========================================================*/
const PROGMEM byte MAP[] = {
  //LEVEL 97
  0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 , 4 , 4 , 4 , 4 , 0, 3 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 , 0, 4 , 0, 4 , 0, 3 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 , 4 , 4 , 4 , 4 , 5 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4 , 0, 4 , 0, 4 , 5 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

  //LEVEL 1
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 3 , 0, 3 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 0, 3 , 2 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 3 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 2
  1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 1 , 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 2 , 1 , 0, 1 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 3 , 1 , 1 , 1 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 3
  0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 3 , 1 , 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 2 , 3 , 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 4 , 4 , 1 , 0, 3 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 4 , 4 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 4
  0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 3 , 2 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 5 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 5
  0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 2 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 1 , 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 3 , 0, 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 0, 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 6
  0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 4 , 1 , 1 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 3 , 0, 3 , 1 , 4 , 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 0, 5 , 0, 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 4 , 1 , 3 , 0, 3 , 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 1 , 1 , 0, 0, 0, 0, 1 , 0, 1 , 1 , 1 , 4 , 0, 0, 0, 0, 2 , 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 7
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 1 , 0, 2 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 3 , 0, 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 3 , 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 4 , 4 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 8
  0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 4 , 0, 3 , 1 , 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 3 , 0, 3 , 0, 0, 2 , 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 0, 3 , 0, 3 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 9
  0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 3 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 3 , 0, 1 , 1 , 1 , 0, 3 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 4 , 4 , 4 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 1 , 4 , 4 , 4 , 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 3 , 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 2 , 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 10
  0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 3 , 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 2 , 0, 3 , 4 , 4 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 4 , 4 , 4 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 11
  0, 1 , 1 , 1 , 1 , 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 3 , 0, 1 , 1 , 1 , 1 , 3 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 3 , 4 , 4 , 4 , 4 , 0, 3 , 0, 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 1 , 0, 2 , 0, 1 , 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 12
  0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 2 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 4 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 4 , 3 , 4 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 5 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 13
  0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 4 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 3 , 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 2 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 14
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 4 , 4 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 2 , 3 , 4 , 5 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 4 , 4 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 15
  0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 3 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 2 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 16
  0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 3 , 0, 1 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 0, 3 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 3 , 1 , 3 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 1 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 2 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 17
  1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 3 , 3 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 4 , 4 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 4 , 4 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 2 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 18
  0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 4 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 0, 3 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 1 , 5 , 4 , 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 0, 1 , 1 , 3 , 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 3 , 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 2 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 19
  0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 5 , 2 , 4 , 4 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 4 , 4 , 4 , 3 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 1 , 3 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 0, 1 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 20
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 3 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 1 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 2 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 21
  0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 4 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 1 , 1 , 3 , 0, 1 , 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 3 , 0, 0, 3 , 3 , 0, 1 , 0, 0, 0, 0, 0, 1 , 2 , 0, 3 , 0, 3 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 22
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 3 , 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 4 , 4 , 4 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 4 , 4 , 4 , 3 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 1 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 3 , 0, 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 2 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 23
  0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 3 , 0, 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 2 , 3 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 3 , 3 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 24
  1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 1 , 0, 1 , 0, 0, 4 , 1 , 0, 0, 1 , 0, 0, 3 , 0, 3 , 0, 1 , 0, 1 , 4 , 4 , 4 , 1 , 0, 0, 1 , 0, 1 , 0, 0, 3 , 0, 1 , 1 , 1 , 0, 0, 4 , 1 , 0, 0, 1 , 0, 0, 3 , 3 , 3 , 0, 0, 0, 3 , 0, 2 , 4 , 1 , 0, 0, 1 , 1 , 1 , 0, 0, 3 , 0, 0, 3 , 1 , 0, 0, 4 , 1 , 0, 0, 0, 0, 1 , 0, 0, 3 , 1 , 3 , 0, 1 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 4 , 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 25
  0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 1 , 0, 3 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 3 , 1 , 1 , 1 , 0, 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 1 , 1 , 0, 5 , 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 1 , 0, 3 , 4 , 4 , 4 , 4 , 4 , 4 , 0, 1 , 0, 0, 0, 0, 1 , 1 , 0, 1 , 1 , 1 , 0, 4 , 0, 1 , 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 3 , 1 , 1 , 1 , 3 , 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 3 , 2 , 1 , 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 3 , 1 , 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 26
  1 , 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 1 , 1 , 0, 1 , 0, 1 , 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 0, 1 , 0, 1 , 0, 0, 1 , 1 , 1 , 1 , 0, 1 , 0, 1 , 0, 0, 1 , 0, 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 1 , 1 , 1 , 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 1 , 0, 0, 1 , 1 , 0, 1 , 0, 0, 1 , 0, 0, 0, 1 , 0, 0, 3 , 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 1 , 0, 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 1 , 1 , 1 , 0, 1 , 1 , 3 , 1 , 0, 0, 1 , 1 , 0, 1 , 1 , 1 , 1 , 0, 3 , 0, 0, 0, 0, 3 , 3 , 0, 1 , 1 , 0, 1 , 0, 1 , 1 , 0, 1 , 3 , 1 , 0, 0, 1 , 0, 0, 1 , 1 , 0, 1 , 0, 1 , 1 , 2 , 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 1 , 1 ,
  //LEVEL 27
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 1 , 0, 1 , 0, 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 3 , 1 , 0, 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 3 , 0, 0, 0, 1 , 0, 1 , 4 , 4 , 1 , 0, 0, 1 , 1 , 0, 3 , 0, 3 , 1 , 0, 1 , 0, 1 , 4 , 4 , 0, 0, 0, 1 , 1 , 0, 3 , 0, 3 , 0, 0, 1 , 0, 1 , 4 , 4 , 1 , 0, 0, 1 , 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 1 , 4 , 4 , 1 , 0, 1 , 0, 3 , 0, 3 , 0, 1 , 0, 0, 0, 0, 1 , 4 , 4 , 0, 0, 0, 0, 0, 3 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 1 , 1 , 1 , 2 , 0, 0, 1 , 1 , 1 , 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0,
  //LEVEL 28
  0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 3 , 0, 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 3 , 0, 0, 1 , 0, 1 , 5 , 4 , 5 , 4 , 5 , 1 , 1 , 1 , 0, 3 , 0, 3 , 0, 1 , 1 , 1 , 4 , 5 , 4 , 5 , 4 , 1 , 0, 1 , 3 , 0, 3 , 0, 0, 1 , 0, 0, 5 , 4 , 5 , 4 , 5 , 1 , 0, 1 , 2 , 3 , 0, 3 , 0, 0, 0, 0, 4 , 5 , 4 , 5 , 1 , 1 , 0, 1 , 3 , 0, 3 , 0, 0, 1 , 0, 0, 5 , 4 , 5 , 4 , 5 , 1 , 1 , 1 , 0, 3 , 0, 3 , 0, 1 , 1 , 1 , 4 , 5 , 4 , 5 , 4 , 1 , 1 , 0, 0, 0, 3 , 0, 0, 1 , 0, 1 , 5 , 4 , 5 , 4 , 5 , 1 , 1 , 0, 0, 3 , 0, 3 , 0, 1 , 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 29
  1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 4 , 4 , 4 , 4 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 3 , 0, 1 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 3 , 0, 3 , 0, 3 , 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 2 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 30
  0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 1 , 1 , 1 , 0, 0, 0, 4 , 3 , 2 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 1 , 1 , 3 , 1 , 1 , 0, 0, 1 , 0, 0, 0, 0, 1 , 0, 0, 0, 5 , 0, 4 , 0, 4 , 0, 1 , 1 , 0, 0, 0, 0, 1 , 1 , 0, 3 , 1 , 1 , 3 , 1 , 1 , 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 0, 4 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //LEVEL 31
  0, 0, 0, 1 , 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 4 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 3 , 3 , 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 4 , 1 , 1 , 4 , 1 , 1 , 4 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 0, 3 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 0, 0, 3 , 0, 1 , 0, 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 0, 0, 0, 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 , 1 , 1 , 1 , 1 , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //同桌李天赐提供
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 4, 1, 0, 4, 0, 1, 1, 0, 0, 1, 4, 4, 1,
  1, 1, 0, 0, 0, 0, 0, 0, 4, 0, 0, 3, 1, 0, 0, 1,
  1, 1, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 3, 0, 0, 1,
  1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1,
  1, 0, 3, 0, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 1, 1,
  1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1,
  1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
  1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1,
  1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1,
  1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,
  1, 0, 1, 0, 3, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1,
  1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,
  1, 2, 3, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 0, 1,
  1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 0, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  //0->空白
  //1->墙
  //2->人
  //3->箱子
  //4->位置
  //5->放到正确位置的箱子
  //6->在标签上的人
  //每个地图大小16*16 可以自行添加
};
/*=========================================================
                         变量
  =========================================================*/
int Pstep; //玩家步数
byte CP = 1; //关卡
byte ACP = (sizeof(MAP) / sizeof(MAP[0])) / 256; //总关卡
int RMAP[256]; //运行地图
int Atmp; //缓存
int Btmp; //缓存
int Ctmp; //缓存
byte DX;
byte DY;
byte P = 0; //玩家在地图中的位置
char PlayerD = -16; //最后方向 默认2 也就是下
boolean LA = false; //行动是否合法
boolean WIN = false; //检测是否通关
int X = 1;
int Y = 1;
/*====================================================================
                             软重启函数
  ====================================================================*/
void(* resetFunc) (void) = 0; //制造重启命令
/*=========================================================
                     只循环一次
  =========================================================*/
void setup() {
  //Serial.begin(115200);
  arduboy.boot();
  arduboy.drawSlowXYBitmap(0, 0, BOOT, 128, 64, 1);
  arduboy.display();
  byte ERC = 0; //EEProm Check
  //检查EEPROM
  for (int i = 0; i < 7; i++) {
    ERC = EEPROM.read(i) + ERC;
    //EEPROM 0   1   2   3   4   5   6
    //      115 111 107 111 98  97  110
    //       s   o   k   o   b   a   n
  }
  if (ERC != 237) {
    arduboy.clear();
    arduboy.println(F("initialize the EEPROM"));
    arduboy.print(ERC);
    arduboy.print("!=");
    arduboy.println(byte(115 + 111 + 107 + 111 + 98 + 97 + 110));
    arduboy.display();
    //初始化EEPROM
    for (int i = 0 ; i < EEPROM.length() ; i++) {
      EEPROM.write(i, 0);
    }
    EEPROM.write(0, 115);
    EEPROM.write(1, 111);
    EEPROM.write(2, 107);
    EEPROM.write(3, 111);
    EEPROM.write(4, 98);
    EEPROM.write(5, 97);
    EEPROM.write(6, 110);
    ERC = 0;
    for (int i = 0; i < 7; i++) {
      ERC = EEPROM.read(i) + ERC;
    }
    if (ERC != 0) resetFunc(); else arduboy.println(F("EEPROM writing error"));
    arduboy.display();
  }
  delay(1500);
  //加载地图
  load_cp();   //把地图载入内存
  draw(); //渲染画面
}
/*=========================================================
                     不停循环
  =========================================================*/
void loop() {
  LA = false;                           //是否刷新移动  否

  if (arduboy.pressed(B_BUTTON)) {      //如果B键与A键按下 （B键作用是重置当前关卡）
    load_cp();                          //把当前关卡地图载入内存
    draw();                             //渲染画面
    loop();                             //回到游戏循环 开始新一轮游戏
  }

  if (arduboy.pressed(A_BUTTON)) {      //打开菜单
    GMenu();
  }
  //键盘控制玩家部分
  if (arduboy.pressed(UP_BUTTON)) {
    PlayerD = -16;//设置玩家方向
    if (RMAP[P - 16] == 0 || RMAP[P - 16] == 3 || RMAP[P - 16] == 4 || RMAP[P - 16] == 5 || RMAP[P - 16] == 6) {
      LA = true;//移动合法
    } else draw();
  } else if (arduboy.pressed(DOWN_BUTTON)) {
    PlayerD = 16;//设置玩家方向
    if (RMAP[P + 16] == 0 || ( RMAP[P + 16] >= 3 && RMAP[P + 16] <= 6)) {
      LA = true;//移动合法
    } else draw();
  } else if (arduboy.pressed(LEFT_BUTTON)) {
    PlayerD = -1;//设置玩家方向
    if (RMAP[P - 1] == 0 || RMAP[P - 1] == 3 || RMAP[P - 1] == 4 || RMAP[P - 1] == 5 || RMAP[P - 1] == 6)  {
      LA = true;//移动合法
    } else draw();
  } else if (arduboy.pressed(RIGHT_BUTTON)) {
    PlayerD = 1;//设置玩家方向
    if (RMAP[P + 1] == 0 || RMAP[P + 1] == 3 || RMAP[P + 1] == 4 || RMAP[P + 1] == 5 || RMAP[P + 1] == 6)  { //检查对应位置是否可以走
      LA = true; //移动合法
    } else draw();
  }


  /*=========================================================
                   移动逻辑判断
    =========================================================*/
  if (LA == true) {
    //行动合法
    //如果脚下是空的
    if (RMAP[P] == 2) {
      if (RMAP[P + PlayerD] == 0) {
        //如果前方是空气
        RMAP[P + PlayerD] = 2;
        RMAP[P] = 0;
        Pstep++; //增加玩家步数
      } else if (RMAP[P + PlayerD] == 4) {  //如果前方是标记
        RMAP[P + PlayerD] = 6;
        RMAP[P] = 0;
        Pstep++; //增加玩家步数
      } else if (RMAP[P + PlayerD] == 5) {  //如果前面不是标记而是标记上有箱子
        //如果前方标签上的箱子前面是空气
        if (RMAP[P + 2 * PlayerD] == 0) {
          RMAP[P + 2 * PlayerD] = 3;
          RMAP[P + PlayerD] = 6;
          RMAP[P] = 0;
          Pstep++; //增加玩家步数
        } else if (RMAP[P + 2 * PlayerD] == 4) {  //如果前方标签上的箱子前面是标签
          RMAP[P + 2 * PlayerD] = 5;
          RMAP[P + PlayerD] = 6;
          RMAP[P] = 0;
          Pstep++; //增加玩家步数
        }
      } else if (RMAP[P + PlayerD] == 3) {  //前方是箱子
        //箱子前面是空气
        if (RMAP[P + 2 * PlayerD] == 0) {
          RMAP[P + 2 * PlayerD] = 3;
          RMAP[P + PlayerD] = 2;
          RMAP[P] = 0;

          Pstep++; //增加玩家步数
        } else if (RMAP[P + 2 * PlayerD] == 4) {
          //箱子前面是标记
          RMAP[P + 2 * PlayerD] = 5;
          RMAP[P + PlayerD] = 2;
          RMAP[P] = 0;
          Pstep++; //增加玩家步数
        }
      }
    } else if (RMAP[P] == 6) { //如果前面不是空气并且脚下有标记
      if (RMAP[P + PlayerD] == 0) {
        RMAP[P + PlayerD] = 2; //如果前方是空气
        RMAP[P] = 4;
        Pstep++; //增加玩家步数
      } else  if (RMAP[P + PlayerD] == 4) { //如果前方依然是是标记
        RMAP[P + PlayerD] = 6;
        RMAP[P] = 4;
        Pstep++; //增加玩家步数
      } else if (RMAP[P + PlayerD] == 5) {
        if (RMAP[P + 2 * PlayerD] == 0) { //如果前方标签上的箱子前面是空气
          RMAP[P + 2 * PlayerD] = 3;
          RMAP[P + PlayerD] = 6;
          RMAP[P] = 4;
          Pstep++; //增加玩家步数
        } else if (RMAP[P + 2 * PlayerD] == 4) {//如果前方标签上的箱子前面是标签
          RMAP[P + 2 * PlayerD] = 5;
          RMAP[P + PlayerD] = 6;
          RMAP[P] = 4;
        }
        Pstep++; //增加玩家步数
      } else if (RMAP[P + PlayerD] == 3) {//如果前方只有箱子，箱子前面但是脚下有标签
        if (RMAP[P + 2 * PlayerD] == 0) {  //箱子前面是空气
          RMAP[P + 2 * PlayerD] = 3;
          RMAP[P + PlayerD] = 2;
          RMAP[P] = 4;
          Pstep++; //增加玩家步数
        } else  if (RMAP[P + 2 * PlayerD] == 4) {//箱子前面是标签
          RMAP[P + 2 * PlayerD] = 5;
          RMAP[P + PlayerD] = 2;
          RMAP[P] = 4;
          Pstep++; //增加玩家步数
        }
      }
    }
    draw();//渲染画面
    delay(50); //防止游戏过快
  }
  if (WIN == true) win(); //检测到通关 调用通关函数
}
/*=========================================================
                  显示
  =========================================================*/
void draw() {
  arduboy.clear();                                        //清除显存
  DrawMap();                                              //渲染游戏地图
  arduboy.display();                                      //把画面显示到OLED上
}
/*=========================================================
                  载入当前关卡
  =========================================================*/
void load_cp() {
  Pstep = 0; //清空玩家步数
  Atmp = 0;                                               //初始化写入地图内存的位置
  Ctmp = (CP - 1) * 256;                                  //设置读取地图结束位置
  for (Btmp = Ctmp; Btmp <= Ctmp + 255; Btmp++) {         //循环读取
    RMAP[Atmp] = pgm_read_byte_near(MAP + Btmp);          //读取相对应位置的地图，写入当前关卡地图内存
    Atmp++;                                               //地图内存地址位置+1
  }
}
/*=========================================================
                  载入当前区块
  =========================================================*/
void DrawMap() {
  DX = 0;
  DY = 0;
  /*=========================================================
           遍历内存检查玩家位置和通关情况
    =========================================================*/
  WIN = true;//假设玩家通关
  for (int i = 0; i <= 255; i++) {              //遍历关卡地图内存;0到255有256个数字,因为规定一关地图大小为16x16所以为256
    if (RMAP[i] == 2) {                         //当前是玩家所在的位置 重设玩家所在地图位置
      P = i;
    } else {
      if (RMAP[i] == 6) P = i;                  //当前是玩家所在的位置 重设玩家所在地图位置
    }
    if (RMAP[i] == 3) WIN = false;              //检测到没有放在指定位置的箱子 表明玩家没有通关
  }
  Atmp = P - 36;                                //视野地图最开始的位置 是关卡地图(16x16大地图)中 玩家位置-19的地方，可以参考下图颜色加深位置（119-110=19）说白了，这个是用来放视野地图最开始的方块在大地图中的位置
  int i = 0;                                    //i为视野地图LMAP的位置 初始化为0
  for (Btmp = P - 36; Btmp <= P + 36; Btmp++) {
    if (Btmp >= Atmp + 9) {
      Btmp += 7;
      Atmp += 16;
    }
    //0->空白
    //1->墙
    //2->人
    //3->箱子
    //4->位置
    //5->放到正确位置的箱子
    //6->在标签上的人
    if (RMAP[Btmp] == 1) {                                                             //当前位置是墙
      //画墙
      arduboy.fillRect(DX - 6,  DY - 6, 16, 16, 0);                                 //清空重绘区
      arduboy.drawLine(DX, DY + 10, DX, DY + 14, BLACK);                            //处理渲染错误的线条
      arduboy.drawLine(DX + 10, DY, DX + 14, DY, BLACK);                            //处理渲染错误的线条
      arduboy.drawSlowXYBitmap(DX - 6, DY - 6,  WALL, 22, 22, 1);                   //显示墙的图片
    }
    if (RMAP[Btmp] == 2 || RMAP[Btmp] == 6) {                                             //当前是玩家的位置
      DrawPlayer();                                                                 //显示玩家
    }
    if (RMAP[Btmp] == 3) {                                                             //如果当前位置是箱子
      DrawBox();                                                                    //显示箱子
    }
    if (RMAP[Btmp] == 5) {                                                             //当前位置是放到标记上的箱子
      arduboy.drawSlowXYBitmap(DX - 6, DY - 6, OBOX, 22, 22, 1);                    //显示打开的箱子图片
    }
    if (RMAP[Btmp] == 4) {                                                             //当前位置是标记(“X”)
      DrawTag();                                                                    //在对应的位置画一个"X"
    }
    DX += 15;
    if (DX > 120) {
      DX = 0;
      DY += 15;
    }
    i++;                                        //视野地图位置+1
  }
}
/*=========================================================
                  绘图函数
  =========================================================*/
void DrawPlayer() {
  //画玩家
  arduboy.fillRect(DX - 1,  DY - 2, 16, 17, 0);                                   //清空重绘区

  //-16为上 16为下 -1为左 +1为右 这样设定是因为地图是一个16x16的一维数组 为了获得相对应位置的地图方块信息要进行地图位置地址移位

  if (PlayerD == -16) {                                                           //如果玩家方向为上
    arduboy.drawSlowXYBitmap(DX - 6, DY - 6,  ManUp, 22, 22, 1);                  //玩家向上图片
  } else {
    if (PlayerD == 16) {//如果玩家方向为下
      arduboy.drawSlowXYBitmap(DX - 6, DY - 6, ManDown, 22, 22, 1);               //玩家向下图片
    } else {
      if (PlayerD == -1) {//如果玩家方向为左
        arduboy.drawSlowXYBitmap(DX - 6, DY - 6, ManLeft, 22, 22, 1);             //玩家向左图片
      } else {                                                                    //如果玩家方向不是上 也不是下 更不是左 （右）
        arduboy.drawSlowXYBitmap(DX - 6, DY - 6,  ManRight, 22, 22, 1);           //玩家向右图片
      }
    }
  }
}
void DrawBox() {
  //画箱子
  arduboy.drawSlowXYBitmap(DX - 6, DY - 6, OBOX, 22, 22, 0);  //消除过多像素
  arduboy.drawSlowXYBitmap(DX - 6, DY - 6,  BOX, 22, 22, 1);
}
void DrawTag() {
  //画标记
  arduboy.drawLine(DX + 5, DY + 5, DX + 16, DY + 16, WHITE);
  arduboy.drawLine(DX + 16, DY + 5, DX + 5, DY + 16, WHITE);
}
/*=========================================================
                  下一关
  =========================================================*/
void win() {
  boolean NE = false;
  //读取EEPROM
  if (EEPROM.read(6 + CP) > Pstep || EEPROM.read(6 + CP) == 0) {
    //破纪录
    EEPROM.write(6 + CP, Pstep);
    NE = true;
  }

  arduboy.clear();                          //清空显存
  arduboy.drawRect(4, 4, 124, 60, 1);
  arduboy.drawLine(44, 4, 76, 4, 0);
  arduboy.setCursor(52, 0);               //设置光标
  arduboy.print(F("WIN"));                 //打印 你赢了
  arduboy.setCursor(32, 16);
  arduboy.print(F("Step "));
  arduboy.print(Pstep);
  arduboy.setCursor(32, 24);
  arduboy.print(F("History "));
  arduboy.print(EEPROM.read(6 + CP));
  if (NE) {
    arduboy.setCursor(32, 40);
    arduboy.print(F("NEW RECORD"));
  }
  arduboy.display();                        //把画面显示在OLED上
  while (!arduboy.pressed(A_BUTTON)) {}
  if (CP < ACP) {                           //如果当前关卡少于总关卡
    CP++;                                   //那么关卡数+1
  } else {                                  //否则如果是最后一关
    CP = 1;                                 //切换回去第一关
  }
  load_cp();                               //把地图载入内存
  arduboy.clear();
  DrawMap();
  arduboy.display();
  delay(50);
}

void GMenu() {
  while ((arduboy.pressed(A_BUTTON))) {
    arduboy.clear();                                        //清除显存
    DrawMap();                                              //渲染游戏地图
    arduboy.fillRect(88,  0, 40, 128, 0);                   //清空重绘区
    arduboy.setCursor(96, 8);                               //设置光标
    arduboy.print(F("Level"));                                      //显示当前关卡
    arduboy.setCursor(96, 16);                               //设置光标
    arduboy.print(CP);
    arduboy.print(F("~"));                                     //显示分隔符
    arduboy.print(ACP);                                     //显示一共有多少关
    arduboy.setCursor(96, 40);
    arduboy.print(F("Step"));
    arduboy.setCursor(96, 48);
    arduboy.print(Pstep);
    if (arduboy.pressed(UP_BUTTON)) {   //上键与A键同时按下
      if (CP < ACP) CP++;               //如果不是最后一关 让关卡数+1
      load_cp();                               //把地图载入内存
    }
    if (arduboy.pressed(DOWN_BUTTON)) { //下键与A键同时按下
      if (CP > 1) CP--;                 //如果不是第一关 让关卡数-1
      load_cp();                               //把地图载入内存
    }

    arduboy.display();
  }
  arduboy.clear();
  DrawMap();
  arduboy.display();
}
